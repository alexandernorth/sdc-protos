// Copyright 2024 Nokia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: data.proto

package schema_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataServer_ListDataStore_FullMethodName   = "/data.DataServer/ListDataStore"
	DataServer_GetDataStore_FullMethodName    = "/data.DataServer/GetDataStore"
	DataServer_CreateDataStore_FullMethodName = "/data.DataServer/CreateDataStore"
	DataServer_DeleteDataStore_FullMethodName = "/data.DataServer/DeleteDataStore"
	DataServer_Commit_FullMethodName          = "/data.DataServer/Commit"
	DataServer_Rebase_FullMethodName          = "/data.DataServer/Rebase"
	DataServer_Discard_FullMethodName         = "/data.DataServer/Discard"
	DataServer_GetData_FullMethodName         = "/data.DataServer/GetData"
	DataServer_SetData_FullMethodName         = "/data.DataServer/SetData"
	DataServer_Diff_FullMethodName            = "/data.DataServer/Diff"
	DataServer_Subscribe_FullMethodName       = "/data.DataServer/Subscribe"
	DataServer_Watch_FullMethodName           = "/data.DataServer/Watch"
	DataServer_GetIntent_FullMethodName       = "/data.DataServer/GetIntent"
	DataServer_SetIntent_FullMethodName       = "/data.DataServer/SetIntent"
	DataServer_ListIntent_FullMethodName      = "/data.DataServer/ListIntent"
	DataServer_WatchDeviations_FullMethodName = "/data.DataServer/WatchDeviations"
)

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	// datastore
	ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error)
	// commits changes in a CANDIDATE datastore to the datastore Target
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// rebases a CANDIDATE datastore
	Rebase(ctx context.Context, in *RebaseRequest, opts ...grpc.CallOption) (*RebaseResponse, error)
	// discards changes made to a CANDIDATE datastore
	Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error)
	// data
	// retrieve data from a MAIN or CANDIDATE datastore, the data is specified
	// with a set of schema.prot.Path
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataResponse], error)
	// writes changes to a CANDIDATE datastore,
	// validates the values written against the datastore schema.
	SetData(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*SetDataResponse, error)
	// returns a list of difference between a CANDIDATE datastore and its base
	Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
	// subscribes for notification from a MAIN datastore,
	// the client specified a list of paths it is interested on as well as
	// a sample interval.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
	// watches a set of paths, returns the values each path points at if the value
	// changes.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error)
	// returns an intent details: name, priority and list of updates
	GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error)
	// applies an intent to the specified datastore
	SetIntent(ctx context.Context, in *SetIntentRequest, opts ...grpc.CallOption) (*SetIntentResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error)
	WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchDeviationResponse], error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) ListDataStore(ctx context.Context, in *ListDataStoreRequest, opts ...grpc.CallOption) (*ListDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_ListDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetDataStore(ctx context.Context, in *GetDataStoreRequest, opts ...grpc.CallOption) (*GetDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_GetDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) CreateDataStore(ctx context.Context, in *CreateDataStoreRequest, opts ...grpc.CallOption) (*CreateDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_CreateDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) DeleteDataStore(ctx context.Context, in *DeleteDataStoreRequest, opts ...grpc.CallOption) (*DeleteDataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataStoreResponse)
	err := c.cc.Invoke(ctx, DataServer_DeleteDataStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, DataServer_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) Rebase(ctx context.Context, in *RebaseRequest, opts ...grpc.CallOption) (*RebaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebaseResponse)
	err := c.cc.Invoke(ctx, DataServer_Rebase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscardResponse)
	err := c.cc.Invoke(ctx, DataServer_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[0], DataServer_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDataRequest, GetDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_GetDataClient = grpc.ServerStreamingClient[GetDataResponse]

func (c *dataServerClient) SetData(ctx context.Context, in *SetDataRequest, opts ...grpc.CallOption) (*SetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDataResponse)
	err := c.cc.Invoke(ctx, DataServer_SetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, DataServer_Diff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[1], DataServer_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_SubscribeClient = grpc.ServerStreamingClient[SubscribeResponse]

func (c *dataServerClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[2], DataServer_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequest, WatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchClient = grpc.ServerStreamingClient[WatchResponse]

func (c *dataServerClient) GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*GetIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntentResponse)
	err := c.cc.Invoke(ctx, DataServer_GetIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) SetIntent(ctx context.Context, in *SetIntentRequest, opts ...grpc.CallOption) (*SetIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIntentResponse)
	err := c.cc.Invoke(ctx, DataServer_SetIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) ListIntent(ctx context.Context, in *ListIntentRequest, opts ...grpc.CallOption) (*ListIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntentResponse)
	err := c.cc.Invoke(ctx, DataServer_ListIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerClient) WatchDeviations(ctx context.Context, in *WatchDeviationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchDeviationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[3], DataServer_WatchDeviations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchDeviationRequest, WatchDeviationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchDeviationsClient = grpc.ServerStreamingClient[WatchDeviationResponse]

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility.
type DataServerServer interface {
	// datastore
	ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error)
	// return a datastore details
	GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error)
	// creates a new datastore, either a MAIN or a CANDIDATE datastore
	CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error)
	// deletes a datastore, either a MAIN or a CANDIDATE datastore
	DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error)
	// commits changes in a CANDIDATE datastore to the datastore Target
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// rebases a CANDIDATE datastore
	Rebase(context.Context, *RebaseRequest) (*RebaseResponse, error)
	// discards changes made to a CANDIDATE datastore
	Discard(context.Context, *DiscardRequest) (*DiscardResponse, error)
	// data
	// retrieve data from a MAIN or CANDIDATE datastore, the data is specified
	// with a set of schema.prot.Path
	GetData(*GetDataRequest, grpc.ServerStreamingServer[GetDataResponse]) error
	// writes changes to a CANDIDATE datastore,
	// validates the values written against the datastore schema.
	SetData(context.Context, *SetDataRequest) (*SetDataResponse, error)
	// returns a list of difference between a CANDIDATE datastore and its base
	Diff(context.Context, *DiffRequest) (*DiffResponse, error)
	// subscribes for notification from a MAIN datastore,
	// the client specified a list of paths it is interested on as well as
	// a sample interval.
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
	// watches a set of paths, returns the values each path points at if the value
	// changes.
	Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error
	// returns an intent details: name, priority and list of updates
	GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error)
	// applies an intent to the specified datastore
	SetIntent(context.Context, *SetIntentRequest) (*SetIntentResponse, error)
	// list intents for a given datastore (name and priority)
	ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error)
	WatchDeviations(*WatchDeviationRequest, grpc.ServerStreamingServer[WatchDeviationResponse]) error
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServerServer struct{}

func (UnimplementedDataServerServer) ListDataStore(context.Context, *ListDataStoreRequest) (*ListDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataStore not implemented")
}
func (UnimplementedDataServerServer) GetDataStore(context.Context, *GetDataStoreRequest) (*GetDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataStore not implemented")
}
func (UnimplementedDataServerServer) CreateDataStore(context.Context, *CreateDataStoreRequest) (*CreateDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataStore not implemented")
}
func (UnimplementedDataServerServer) DeleteDataStore(context.Context, *DeleteDataStoreRequest) (*DeleteDataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataStore not implemented")
}
func (UnimplementedDataServerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedDataServerServer) Rebase(context.Context, *RebaseRequest) (*RebaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebase not implemented")
}
func (UnimplementedDataServerServer) Discard(context.Context, *DiscardRequest) (*DiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discard not implemented")
}
func (UnimplementedDataServerServer) GetData(*GetDataRequest, grpc.ServerStreamingServer[GetDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedDataServerServer) SetData(context.Context, *SetDataRequest) (*SetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetData not implemented")
}
func (UnimplementedDataServerServer) Diff(context.Context, *DiffRequest) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedDataServerServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDataServerServer) Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedDataServerServer) GetIntent(context.Context, *GetIntentRequest) (*GetIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntent not implemented")
}
func (UnimplementedDataServerServer) SetIntent(context.Context, *SetIntentRequest) (*SetIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntent not implemented")
}
func (UnimplementedDataServerServer) ListIntent(context.Context, *ListIntentRequest) (*ListIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntent not implemented")
}
func (UnimplementedDataServerServer) WatchDeviations(*WatchDeviationRequest, grpc.ServerStreamingServer[WatchDeviationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchDeviations not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}
func (UnimplementedDataServerServer) testEmbeddedByValue()                    {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	// If the following call pancis, it indicates UnimplementedDataServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_ListDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_ListDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListDataStore(ctx, req.(*ListDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_GetDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetDataStore(ctx, req.(*GetDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_CreateDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).CreateDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_CreateDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).CreateDataStore(ctx, req.(*CreateDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_DeleteDataStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).DeleteDataStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_DeleteDataStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).DeleteDataStore(ctx, req.(*DeleteDataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_Rebase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).Rebase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_Rebase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).Rebase(ctx, req.(*RebaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_Discard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).Discard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_Discard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).Discard(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).GetData(m, &grpc.GenericServerStream[GetDataRequest, GetDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_GetDataServer = grpc.ServerStreamingServer[GetDataResponse]

func _DataServer_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_SetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).SetData(ctx, req.(*SetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_Diff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).Diff(ctx, req.(*DiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_SubscribeServer = grpc.ServerStreamingServer[SubscribeResponse]

func _DataServer_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).Watch(m, &grpc.GenericServerStream[WatchRequest, WatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchServer = grpc.ServerStreamingServer[WatchResponse]

func _DataServer_GetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_GetIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetIntent(ctx, req.(*GetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_SetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).SetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_SetIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).SetIntent(ctx, req.(*SetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_ListIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).ListIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_ListIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).ListIntent(ctx, req.(*ListIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServer_WatchDeviations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDeviationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServer).WatchDeviations(m, &grpc.GenericServerStream[WatchDeviationRequest, WatchDeviationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServer_WatchDeviationsServer = grpc.ServerStreamingServer[WatchDeviationResponse]

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataStore",
			Handler:    _DataServer_ListDataStore_Handler,
		},
		{
			MethodName: "GetDataStore",
			Handler:    _DataServer_GetDataStore_Handler,
		},
		{
			MethodName: "CreateDataStore",
			Handler:    _DataServer_CreateDataStore_Handler,
		},
		{
			MethodName: "DeleteDataStore",
			Handler:    _DataServer_DeleteDataStore_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DataServer_Commit_Handler,
		},
		{
			MethodName: "Rebase",
			Handler:    _DataServer_Rebase_Handler,
		},
		{
			MethodName: "Discard",
			Handler:    _DataServer_Discard_Handler,
		},
		{
			MethodName: "SetData",
			Handler:    _DataServer_SetData_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _DataServer_Diff_Handler,
		},
		{
			MethodName: "GetIntent",
			Handler:    _DataServer_GetIntent_Handler,
		},
		{
			MethodName: "SetIntent",
			Handler:    _DataServer_SetIntent_Handler,
		},
		{
			MethodName: "ListIntent",
			Handler:    _DataServer_ListIntent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _DataServer_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DataServer_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _DataServer_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchDeviations",
			Handler:       _DataServer_WatchDeviations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
