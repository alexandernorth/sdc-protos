syntax = "proto3";

import "google/protobuf/any.proto";
import "schema.proto";

package data;

option go_package = ".;schema_server";

service DataServer {
    // datastore
    rpc ListDataStore(ListDataStoreRequest)     returns (ListDataStoreResponse);
    // return a datastore details
    rpc GetDataStore(GetDataStoreRequest)       returns (GetDataStoreResponse);
    // creates a new datastore, either a MAIN or a CANDIDATE datastore
    rpc CreateDataStore(CreateDataStoreRequest) returns (CreateDataStoreResponse);
    // deletes a datastore, either a MAIN or a CANDIDATE datastore
    rpc DeleteDataStore(DeleteDataStoreRequest) returns (DeleteDataStoreResponse);
    // commits changes in a CANDIDATE datastore to the datastore Target
    rpc Commit(CommitRequest)                   returns (CommitResponse);
    // rebases a CANDIDATE datastore
    rpc Rebase(RebaseRequest)                   returns (RebaseResponse);
    // discards changes made to a CANDIDATE datastore
    rpc Discard(DiscardRequest)                 returns (DiscardResponse);
    // data
    // retrieve data from a MAIN or CANDIDATE datastore, the data is specified 
    // with a set of schema.prot.Path
    rpc GetData(GetDataRequest)                 returns (stream GetDataResponse);
    // writes changes to a CANDIDATE datastore,
    // validates the values written against the datastore schema.
    rpc SetData(SetDataRequest)                 returns (SetDataResponse);
    // returns a list of difference between a CANDIDATE datastore and its base
    rpc Diff(DiffRequest)                       returns (DiffResponse);
    // subscribes for notification from a MAIN datastore,
    // the client specified a list of paths it is interested on as well as 
    // a sample interval.
    rpc Subscribe(SubscribeRequest)             returns (stream SubscribeResponse);
    // watches a set of paths, returns the values each path points at if the value
    // changes.
    rpc Watch(WatchRequest)                     returns (stream WatchResponse);
}

// messages
message GetDataRequest {
    string               name      = 1;
    DataStore            datastore = 2;
    repeated schema.Path path      = 3;
    schema.DataType      data_type = 4;
}
message GetDataResponse {
    // list of paths and values
    repeated Notification notification = 1;
}

message SetDataRequest {
    // datastore name
    string                      name                    = 1;
    // datastore type and name
    DataStore                   datastore               = 2;
    // data owner
    string                      owner                   = 3;
    // priority
    uint32                      priority                = 4;
    // list of updates
    repeated Update             update                  = 10;
    // list of replaces
    repeated Update             replace                 = 11;
    // list of deltes
    repeated schema.Path        delete                  = 12;
}
message SetDataResponse {
    // A set of responses specifying the result of the operations specified in
    // the SetRequest.
    repeated UpdateResult response = 2;  
    // Timestamp of transaction (ns since epoch).                  
    int64 timestamp = 4;                 
}

message DiffRequest {
    // datastore name
    string    name       = 1;
    // CANDIDATE datastore name
    DataStore datastore = 2;
}
message DiffResponse {
    // datastore name
    string              name        = 1;
    // CANDIDATE datastore name
    DataStore           datastore  = 2;
    // list of paths and values that differ between MAIN and CANDIDATE
    repeated DiffUpdate diff        = 3;
}

message SubscribeRequest {
    // datastore name
    string                name          = 1;
    repeated Subscription subscription  = 2;
}
message SubscribeResponse {
    oneof response {
        Notification update = 1;
        bool sync_response  = 3;
    }
}

// DS
message ListDataStoreRequest{}
message ListDataStoreResponse{
    repeated GetDataStoreResponse datastores = 1;
}

message GetDataStoreRequest {
    // datastore name
    string name = 1;
}
message GetDataStoreResponse {
    // datastore name
    string              name        = 1;
    // list of candidates in this datastore
    repeated DataStore  datastore   = 2;
    // the schema this datastore should comply with
    schema.Schema       schema      = 3;
    // south bound interface target of this datastore
    Target              target      = 4;
}

message CreateDataStoreRequest {
    // datastore name
    string              name        = 1;
    // datastore type to be created
    DataStore           datastore   = 2;
    // the schema this datastore should comply with
    schema.Schema       schema      = 3;
     // south bound interface target of this datastore
    Target              target      = 4;
    //
    Sync                sync = 5;
}
message CreateDataStoreResponse {}

message DeleteDataStoreRequest {
    // datastore name
    string    name      = 1;
    // datastore (to be deleted) type and name
    DataStore datastore = 2;
}
message DeleteDataStoreResponse {}

message CommitRequest {
    // datastore name
    string      name      = 1;
    // candidate name
    DataStore   datastore = 2;
    // rebase before commiting 
    bool        rebase    = 3;
    // do not delete the candidate after commiting
    // reset changes and rebase after commiting
    bool        stay      = 4;
}
message CommitResponse {}

message RebaseRequest{
    // datastore name
    string      name      = 1;
    // candidate name
    DataStore   datastore = 2;
}
message RebaseResponse{}

message DiscardRequest {
    // datastore name
    string    name      = 1;
    // candidate name to discard
    DataStore datastore = 2;
    // do not delete candidate after discarding changes
    bool      stay      = 3;
}
message DiscardResponse {}

message WatchRequest {
    string         name = 1;
    repeated Watch watch = 2;
}

message WatchResponse {
    Notification notification = 1;
}

// sub messages
message Update {
    schema.Path path  = 1;
    TypedValue  value = 2;
}

message DiffUpdate {
    schema.Path path              = 1;
    TypedValue  main_value        = 2;
    TypedValue  candidate_value   = 3;
}

message TypedValue {
    oneof value
    {
        string string_val = 1;            // String value.
        int64 int_val = 2;                // Integer value.
        uint64 uint_val = 3;              // Unsigned integer value.
        bool bool_val = 4;                // Bool value.
        bytes bytes_val = 5;              // Arbitrary byte sequence value.
        float float_val = 6;              // Floating point value.
        Decimal64 decimal_val = 7;        // Decimal64 encoded value.
        double Double_val = 8;            // Double encoded value.
        ScalarArray leaflist_val = 9;     // Mixed type scalar array value.
        google.protobuf.Any any_val = 10;  // protobuf.Any encoded bytes.
        bytes json_val = 11;              // JSON-encoded text.
        bytes json_ietf_val = 12;         // JSON-encoded text per RFC7951.
        string ascii_val = 13;            // Arbitrary ASCII text.
        bytes proto_bytes = 14;
        IntendedValues intended_vals = 15;
    }
}

message IntendedValues {
    repeated IntendedValue intended_vals = 1;
}

message IntendedValue {
    string      owner    = 1;
    uint32      priority = 2;
    TypedValue  typed_val = 3;
}

message UpdateResult {
  // The operation that was associated with the schema.Path specified.
  enum Operation {
    INVALID = 0;
    DELETE  = 1; // The result relates to a delete of  schema.Path.
    REPLACE = 2; // The result relates to a replace of schema.Path.
    UPDATE  = 3; // The result relates to an update of schema.Path.
  }
  schema.Path       path = 2; // schema.Path associated with the update.
  Operation         op   = 4; // Update operation type.
}

message Notification {
    // Timestamp in nanoseconds since Epoch.
    int64                timestamp  = 1;
    // Data elements that have changed values.
    repeated Update      update     = 4;
    // Data elements that have been deleted.
    repeated schema.Path delete     = 5;     
}

enum Type {
    MAIN      = 0;
    CANDIDATE = 1;
}

message DataStore {
    // datastore type, MAIN or CANDIDATE
    Type  type  = 1;
    // name of the datastore (candidate)
    string name = 2;
}

// Decimal64 is used to encode a fixed precision decimal number. The value
// is expressed as a set of digits with the precision specifying the
// number of digits following the decimal point in the digit set.
message Decimal64 {
  int64  digits = 1;         // Set of digits.
  uint32 precision = 2;     // Number of digits following the decimal point.
}

// ScalarArray is used to encode a mixed-type array of values.
message ScalarArray {
  // The set of elements within the array. Each TypedValue message should
  // specify only elements that have a field identifier of 1-7 (i.e., the
  // values are scalar values).
  repeated TypedValue element = 1;
}

// Southbound interface of the datastore
message Target {
    string      type        = 1;
    string      address     = 2;
    TLS         tls         = 3;
    Credentials credentials = 4;
}

// TLS Config
message TLS {
    string ca           = 1;
    string cert         = 2;
    string key          = 3;
    bool   skip_verify  = 4;
}

// Target Credentials
message Credentials {
    string username = 1;
    string password = 2;
    string token    = 3;
}

message Sync {
    bool                validate        = 1;
    int64               buffer          = 2;
    int64               write_workers   = 3;
    repeated GNMISync   gnmi            = 4;
}

message GNMISync {
    // sync routing name
    string name = 1;
    // paths to subscribe to
    repeated string path = 2;
    // mode, on-change, sample, or once
    SyncMode mode = 3;
    // encoding
    string encoding = 4;
    // interval for mode sample or once
    uint64 interval = 5;
}

enum SyncMode {
    SM_ON_CHANGE = 0;
    SM_SAMPLE    = 1;
    SM_ONCE      = 2;
}

message Subscription {
    repeated schema.Path path               = 1;
    schema.DataType      data_type          = 2;
    uint64               sample_interval    = 3;
    bool                 suppress_redundant = 4;
}

message Watch {
    repeated schema.Path path = 1;
    schema.DataType      data_type = 2;
    uint64               heartbeat_interval = 3;
}
